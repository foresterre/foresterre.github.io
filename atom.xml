<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Don&#x27;t panic, impl Things</title>
    <subtitle>A blog by Martijn Gribnau</subtitle>
    <link rel="self" type="application/atom+xml" href="https://gribnau.dev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://gribnau.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-13T00:00:00+00:00</updated>
    <id>https://gribnau.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>Where are the security advisories of the recently compromised NPM packages?</title>
        <published>2025-09-13T00:00:00+00:00</published>
        <updated>2025-09-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/finding-security-advisories/"/>
        <id>https://gribnau.dev/posts/finding-security-advisories/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/finding-security-advisories/">&lt;p&gt;Four days ago, &lt;a href=&quot;https:&#x2F;&#x2F;www.aikido.dev&#x2F;blog&#x2F;npm-debug-and-chalk-packages-compromised&quot;&gt;news&lt;&#x2F;a&gt; came in that several packages on NPM were compromised; later it turned out to that it wasn&#x27;t just one NPM account that was compromised by the (it seems) the same phishing attack, but multiple. The compromised accounts published new package versions containing malware which intercepted network traffic and replaced crypto wallet addresses with alternative malicious addresses. Various popular packages were affected, such as &lt;code&gt;chalk&lt;&#x2F;code&gt; and &lt;code&gt;debug-js&lt;&#x2F;code&gt; via &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;~qix&quot;&gt;Qix&lt;&#x2F;a&gt;&#x27;s NPM account, and &lt;code&gt;duckdb&lt;&#x2F;code&gt; via the &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;~duckdb_admin&quot;&gt;duckdb_admin&lt;&#x2F;a&gt; NPM account.&lt;&#x2F;p&gt;
&lt;p&gt;The malware and compromised accounts (at least the one&#x27;s we know of) was fairly quickly detected and actions were taken over the next few days to prevent the malicious NPM packages from being installed by downstream users. Props to all involved in the effort, and the open communication!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-the-security-advisories&quot;&gt;Finding the security advisories&lt;&#x2F;h2&gt;
&lt;p&gt;Now yesterday, I wanted to find the security advisories for the affected packages for a report at my day job. This turned out to be not as easy as I expected. Simply searching for, e.g. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories?query=chalk&quot;&gt;chalk&lt;&#x2F;a&gt; on the GitHub Advisory Database page gave me four results, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prebid&#x2F;Prebid.js&#x2F;security&#x2F;advisories&#x2F;GHSA-jwq7-6j4r-2f92&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories&#x2F;GHSA-m662-56rj-8fmm&quot;&gt;of&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories&#x2F;GHSA-w62p-hx95-gf2c&quot;&gt;which&lt;&#x2F;a&gt; were sort of related, but none of them was the security issue in Chalk itself. I thought for a moment they maybe would have issued only a &quot;top level&quot; kind of advisory linked to e.g. the &lt;code&gt;debug&lt;&#x2F;code&gt; package, since that repo was used as a central location to file most of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;debug-js&#x2F;debug&#x2F;issues&#x2F;1005#issuecomment-3266885191&quot;&gt;responses&lt;&#x2F;a&gt;, but &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories?page=1&amp;amp;query=debug&quot;&gt;no luck&lt;&#x2F;a&gt; (this sometimes happens when there is a CVE which links multiple packages, like in the case of the compromised &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories&#x2F;GHSA-w62p-hx95-gf2c&quot;&gt;DuckDB&lt;&#x2F;a&gt; packages. Changing the type to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories?query=type%3Aunreviewed%20chalk&quot;&gt;unreviewed&lt;&#x2F;a&gt; in case they would be filtered out by default gave even less results (0).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;security-advisories-chalk.png&quot; alt=&quot;Result of searching for &amp;#39;chalk&amp;#39; on GitHub&amp;#39;s security advisory page&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then I tried searching via the repo&#x27;s themselves, for example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chalk&#x2F;chalk&#x2F;security&#x2F;advisories&quot;&gt;chalk&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;debug-js&#x2F;debug&#x2F;security&#x2F;advisories&quot;&gt;debug&lt;&#x2F;a&gt;. These seem to be exclusive to information posed by the maintainers, which in this case opted to use different channels as there is nothing there.&lt;&#x2F;p&gt;
&lt;p&gt;However, good news! They do exist! I have no idea how I should have found them without going through GitHub&#x27;s own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;advisory-database&quot;&gt;advisory-database&lt;&#x2F;a&gt; repo though, which is not exactly setup to be searched by humans directly. This repo also hosts &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;advisory-database&#x2F;issues&#x2F;6099&quot;&gt;these&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;advisory-database&#x2F;issues&#x2F;6103&quot;&gt;two&lt;&#x2F;a&gt; related issues, which both contain partial lists with links to the specific advisories.&lt;&#x2F;p&gt;
&lt;p&gt;As examples, here are the advisories for:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories&#x2F;GHSA-2v46-p5h4-248w&quot;&gt;chalk&lt;&#x2F;a&gt;, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;advisories&#x2F;GHSA-8mgj-vmr8-frr6&quot;&gt;debug&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If I have to guess, then I would guess the advisories only show up after package maintainers have approved it from a security dashboard; but I am not sure.&lt;&#x2F;p&gt;
&lt;p&gt;Now, another reason why the search may be so difficult, is that there doesn&#x27;t seem to be a CVE for most packages (I couldn&#x27;t find one, for example &lt;a href=&quot;https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;search#&#x2F;nvd&#x2F;home?keyword=chalk&amp;amp;resultType=records&quot;&gt;chalk&lt;&#x2F;a&gt; again). DuckDB however does have &lt;a href=&quot;https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;search#&#x2F;nvd&#x2F;home?keyword=duckdb&amp;amp;resultType=records&quot;&gt;one&lt;&#x2F;a&gt;, and prebid-js &lt;a href=&quot;https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;detail&#x2F;CVE-2025-59038&quot;&gt;has&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;detail&#x2F;CVE-2025-59039&quot;&gt;two&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m unfamiliar with the process and can see that there are pratical limitations, not only because there are many parties involved and distributed over the world, but also because there are many different places where relevant info is posted, and a reasonable way to link from a root page may not be that obvious.&lt;&#x2F;p&gt;
&lt;p&gt;Still, I feel that the way the information is published, presented and made searchable can be improved, for example by giving maintainers a more central way to publish status updates (i.e. written text) for multiple packages at once.&lt;&#x2F;p&gt;
&lt;p&gt;Next time I would go directly to the &lt;code&gt;github&#x2F;advisory-database&lt;&#x2F;code&gt; repository, as it &lt;del&gt;is unclear to me why some bits of information are not shown from the Advisories page&lt;&#x2F;del&gt;. While writing the post I found that GitHub&#x27;s security advisories &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;code-security&#x2F;security-advisories&#x2F;working-with-global-security-advisories-from-the-github-advisory-database&#x2F;about-the-github-advisory-database#malware-advisories&quot;&gt;documentation&lt;&#x2F;a&gt; are probably hidden under explicit use of the &lt;code&gt;type:malware&lt;&#x2F;code&gt; tag by default, because &quot;most of the vulnerabilities cannot be resolved by downstream users&quot;. This is, I assume, also why DuckDB&#x27;s advisory does show up; it is not tagged under malware (but posted to DuckDB&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;duckdb&#x2F;duckdb-node&#x2F;security&#x2F;advisories&#x2F;GHSA-w62p-hx95-gf2c&quot;&gt;duckdb-node&lt;&#x2F;a&gt; repo, and also has a CVE, i.e. CVE-2025-59037).&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know yet whether hiding malware typed advisories by default is a practice I like. I definitely don&#x27;t like that I this is non-obvious from the advisories page itself.&lt;&#x2F;p&gt;
&lt;p&gt;Still, most of my critique stands: finding the right information fast is difficult, and the way advisories are posted is different per package.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-npm-deletes-packages&quot;&gt;When NPM deletes packages&lt;&#x2F;h2&gt;
&lt;p&gt;The second thing I felt can be improved is the way [npmjs.org] removes affected packages. I consider it a good practice to remove the packages to reduce amount of affected downstream users. However, from the website, it is not clear why the package was removed (or whether it existed ever).&lt;&#x2F;p&gt;
&lt;p&gt;Take for example &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;chalk?activeTab=versions&quot;&gt;chalk&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The NPM website currently lists the following version history (I&#x27;ll only list the last few packages):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Version Downloads (Last 7 Days) Published
&lt;&#x2F;span&gt;&lt;span&gt;5.6.2 5,188,950 4 days ago
&lt;&#x2F;span&gt;&lt;span&gt;5.6.0 8,711,608 a month ago
&lt;&#x2F;span&gt;&lt;span&gt;5.5.0 1,769,950 a month ago
&lt;&#x2F;span&gt;&lt;span&gt;5.4.1 12,873,396  9 months ago
&lt;&#x2F;span&gt;&lt;span&gt;5.4.0 64,837  9 months ago
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NB: It doesn&#x27;t matter whether you tick the &quot;show deprecated versions&quot; box.&lt;&#x2F;p&gt;
&lt;p&gt;From this page, you have no idea that 5.6.1 was ever published and subsequently removed.&lt;&#x2F;p&gt;
&lt;p&gt;I think it would be an improvement to show the version, and mark it explicitly as &quot;removed&quot;, so users are not left guessing. That would help you in your search to find context about why it was removed. More information like related advisories would be a bonus.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, you will find the reason for the removal reported through the CLI, which is a good thing. However, if you use e.g. renovate bot (the open source version), you could have merged a PR to update the package without ever having installed the package yourself (and subsequently not have seen the notice), perhaps even because the PR was created before the infected package was noticed by anyone. It is that easy to end up with a deployed release affected with malware.&lt;&#x2F;p&gt;
&lt;p&gt;My critiques for both these issues are quite the same: the way information is presented when it is critical is not yet where it could be. Of course there are many vendors which offer scanners for packages and package ecosystems, which maybe offer some central way to access information about the compromise. Still, sometimes you also need more specific or end-use information, if possible from the source. I hope that the future will bring better tooling or presentations to quickly assess vulnerability situations, even before a post-mortem took place.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Grammar checking from the CLI with Harper</title>
        <published>2025-08-17T00:00:00+00:00</published>
        <updated>2025-08-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/harper-cli/"/>
        <id>https://gribnau.dev/posts/harper-cli/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/harper-cli/">&lt;p&gt;A few months ago I learned of the existence of &lt;a href=&quot;https:&#x2F;&#x2F;writewithharper.com&quot;&gt;Harper&lt;&#x2F;a&gt;, which describes itself as a lightweight, offline, grammar checker. Both the website and GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;automattic&#x2F;harper&quot;&gt;repository&lt;&#x2F;a&gt; are a bit sparse on how to use it, but they do link to all sorts of &lt;a href=&quot;https:&#x2F;&#x2F;writewithharper.com&#x2F;docs&#x2F;integrations&#x2F;language-server&quot;&gt;integrations&lt;&#x2F;a&gt;, which I think all use the Harper language server. There is also &lt;a href=&quot;https:&#x2F;&#x2F;writewithharper.com&#x2F;docs&#x2F;harperjs&#x2F;introduction&quot;&gt;harper.js&lt;&#x2F;a&gt;, mostly for web applications and browser extensions.&lt;&#x2F;p&gt;
&lt;p&gt;While the language server (or &lt;code&gt;harper.js&lt;&#x2F;code&gt;) is great for extensive editor use, I sometimes just want to quickly check a file for spelling and grammatical issues. As it turns out, this is already possible by using the &lt;code&gt;harper-cli&lt;&#x2F;code&gt; tool.&lt;&#x2F;p&gt;
&lt;p&gt;This CLI is not documented on the documentation website, probably, as I found out later, because it is still listed as an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Automattic&#x2F;harper&#x2F;tree&#x2F;c37fa1a437279ed8449f75a80178c55f29e4df80&#x2F;harper-cli&quot;&gt;experimental&lt;&#x2F;a&gt; frontend. I&#x27;m glad it exists though; it saved me from even considering how to use the LSP from the command line directly, and from installing and using one of the integrations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-it&quot;&gt;Installing it&lt;&#x2F;h2&gt;
&lt;p&gt;Installing it is easy! If you have &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;&quot;&gt;Cargo&lt;&#x2F;a&gt; installed, you can install it from source by running &lt;code&gt;cargo install --locked --git https:&#x2F;&#x2F;github.com&#x2F;Automattic&#x2F;harper.git harper-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On Windows I also found out you can install it using &lt;a href=&quot;https:&#x2F;&#x2F;scoop.sh&#x2F;&quot;&gt;scoop&lt;&#x2F;a&gt;. I was delighted to see that &lt;code&gt;scoop install harper&lt;&#x2F;code&gt; didn&#x27;t just install the language server binary, but also &lt;code&gt;harper-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-it&quot;&gt;Using it&lt;&#x2F;h2&gt;
&lt;p&gt;The current version (&lt;code&gt;0.1.0&lt;&#x2F;code&gt;), shows the following help page when running &lt;code&gt;harper-cli --help&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;A debugging tool for the Harper grammar checker
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Usage: harper-cli.exe &amp;lt;COMMAND&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Commands:
&lt;&#x2F;span&gt;&lt;span&gt;  lint                   Lint a provided document
&lt;&#x2F;span&gt;&lt;span&gt;  parse                  Parse a provided document and print the detected symbols
&lt;&#x2F;span&gt;&lt;span&gt;  spans                  Parse a provided document and show the spans of the detected tokens
&lt;&#x2F;span&gt;&lt;span&gt;  annotate-tokens        Parse a provided document and annotate its tokens
&lt;&#x2F;span&gt;&lt;span&gt;  metadata               Get the metadata associated with a particular word
&lt;&#x2F;span&gt;&lt;span&gt;  forms                  Get all the forms of a word using the affixes
&lt;&#x2F;span&gt;&lt;span&gt;  words                  Emit a decompressed, line-separated list of the words in Harper&amp;#39;s dictionary
&lt;&#x2F;span&gt;&lt;span&gt;  summarize-lint-record  Summarize a lint record
&lt;&#x2F;span&gt;&lt;span&gt;  config                 Print the default config with descriptions
&lt;&#x2F;span&gt;&lt;span&gt;  mine-words             Print a list of all the words in a document, sorted by frequency
&lt;&#x2F;span&gt;&lt;span&gt;  core-version           Print harper-core version
&lt;&#x2F;span&gt;&lt;span&gt;  rename-flag            Rename a flag in the dictionary and affixes
&lt;&#x2F;span&gt;&lt;span&gt;  compounds              Emit a decompressed, line-separated list of the compounds in Harper&amp;#39;s dictionary. As long as there&amp;#39;s either an open or hyphenated spelling
&lt;&#x2F;span&gt;&lt;span&gt;  case-variants          Emit a decompressed, line-separated list of the words in Harper&amp;#39;s dictionary which occur in more than one lettercase variant
&lt;&#x2F;span&gt;&lt;span&gt;  nominal-phrases        Provided a sentence or phrase, emit a list of each noun phrase contained within
&lt;&#x2F;span&gt;&lt;span&gt;  help                   Print this message or the help of the given subcommand(s)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Options:
&lt;&#x2F;span&gt;&lt;span&gt;  -h, --help     Print help
&lt;&#x2F;span&gt;&lt;span&gt;  -V, --version  Print version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For my use case, the most simple command sufficed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ harper-cli lint .\content\posts\2025-05-15_thank_you_all_for_ten_years_of_stable_rust.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That gave me the following result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;harper-cli.png&quot; alt=&quot;Result of harper-cli output showing some grammatical errors&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What a delightful way to check for flagrant spelling errors in markdown files. Thanks Harper authors!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Thank you all for 10 years of (stable) Rust</title>
        <published>2025-05-15T00:00:00+00:00</published>
        <updated>2025-05-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/thank-you-all-for-ten-years-of-stable-rust/"/>
        <id>https://gribnau.dev/posts/thank-you-all-for-ten-years-of-stable-rust/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/thank-you-all-for-ten-years-of-stable-rust/">&lt;p&gt;Today marks the 10th anniversary of &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2015&#x2F;05&#x2F;15&#x2F;Rust-1.0&#x2F;&quot;&gt;Rust 1.0&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;rust-1-87-0-pre-release-testing&#x2F;22896&quot;&gt;Rust 1.87&lt;&#x2F;a&gt; will be released live on stage at the &lt;a href=&quot;https:&#x2F;&#x2F;rustweek.org&#x2F;celebration&#x2F;&quot;&gt;10 years of Rust celebration&lt;&#x2F;a&gt; this afternoon (hosted by RustWeek, there are still tickets I heard). Over these past 10 years, Rust had a major positive impact on my life in various ways, and I&#x27;m extremely grateful for that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to all Rust contributors and to our community, it has been a blast 🎉&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An anniversary is usually a good moment to look forward, but it also marks a good moment to take a step back, and reflect a bit on the past. Yesterday I scrolled back through the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;master&#x2F;RELEASES.md&quot;&gt;release notes&lt;&#x2F;a&gt; for a bit, and reflected on some improvements which I&#x27;ve been taking more and more for granted.&lt;&#x2F;p&gt;
&lt;p&gt;The one which pops out of that list the most (for me) is probably the &lt;code&gt;?&lt;&#x2F;code&gt; operator. It was stabilized in &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2016&#x2F;11&#x2F;10&#x2F;Rust-1.13&#x2F;&quot;&gt;Rust 1.13.0&lt;&#x2F;a&gt;, but prototyped via the &lt;code&gt;try!&lt;&#x2F;code&gt; macro some time before that. I can truthfully say that every time I write in another language, I miss that &lt;code&gt;?&lt;&#x2F;code&gt; and the associated &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Try.html&quot;&gt;&lt;code&gt;Try&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait (I kind of wish the trait was marked stable 😅).&lt;&#x2F;p&gt;
&lt;!-- The other big ones which made Rust less cumbersome to write were of course [non lexical lifetimes](https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;12&#x2F;06&#x2F;Rust-1.31-and-rust-2018&#x2F;#non-lexical-lifetimes), lifetime elision improvements, the deref improvements (no more `&amp;***`) and a boat load of library improvements.

&lt;sup&gt;...and then there is of course the documentation, the tools, the community, the transparent and in the open development. And so much more.&lt;&#x2F;sup&gt; --&gt;
&lt;p&gt;The time where a large portion of the community was on nightly by default is now far in the past. With the vision doc for Rust taking shape, and likely hundreds of other &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-project-goals&#x2F;2025h1&#x2F;index.html&quot;&gt;improvements&lt;&#x2F;a&gt;, I can&#x27;t wait for the next 10 years of stable Rust.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Accessibility and Rust podcast at RustWeek</title>
        <published>2025-05-13T00:00:00+00:00</published>
        <updated>2025-05-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/rustweek-accessibility-and-rust-podcast/"/>
        <id>https://gribnau.dev/posts/rustweek-accessibility-and-rust-podcast/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/rustweek-accessibility-and-rust-podcast/">&lt;p&gt;Just hours ago, the first full conference day of &lt;a href=&quot;https:&#x2F;&#x2F;rustweek.org&#x2F;&quot;&gt;RustWeek 2025&lt;&#x2F;a&gt; ended. Everything went smoothly, so big props to the organisers, volunteers*, the audio and video crew, and staff at the venue. Also shoutout to the people who designed and organized the stickers, they&#x27;re really really great, and also to the excellent barista coffee ☕.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;stickers_rustweek.jpg&quot; alt=&quot;A small sample of stickers at RustWeek&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The day ended for me by attending the live recording of the &lt;a href=&quot;https:&#x2F;&#x2F;corrode.dev&#x2F;podcast&quot;&gt;Rust in Production&lt;&#x2F;a&gt; podcast in which Matthias Endler interviewed Niko Matsakis about his experiences of building Rust over the past 10 years, and by attending the live recording of another podcast titled &#x27;Accessibility and Rust&#x27; (which if I recall correcly will be published on the &lt;a href=&quot;https:&#x2F;&#x2F;rustacean-station.org&quot;&gt;Rustacean Station&lt;&#x2F;a&gt;). In this podcast &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;luukvanderduim&quot;&gt;Luuk van der Duim&lt;&#x2F;a&gt; was joined by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mwcampbell&quot;&gt;Matt Campbell&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DataTriny&quot;&gt;Arnold Loubriat&lt;&#x2F;a&gt; to talk about their experience of working on libraries and tooling to make graphical user interfaces (GUI&#x27;s) more accessible. Both sessions were excellent. I wanted to take a moment to say a few words about the second one, which really spoke to me.&lt;&#x2F;p&gt;
&lt;p&gt;During the podcast Matt and Arnold give some insight into how they &quot;see&quot; graphical computer programs, and also how they often can&#x27;t because of shortcomings or lack of accessibility in programs. From a software engineering point of view, I have a feeling, we often shove accessibility features under the rug because of a percieved lack of business need, cost or complexity, so I&#x27;m happy there are people working on lowering the barrier.&lt;&#x2F;p&gt;
&lt;p&gt;This talk also addressed another possible reason (applified by the audience after the recording session), that for many developers who don&#x27;t use assistive technologies like screenreaders, it&#x27;s opaque how to build software that is accessible. On top of that, there is also the question of how to test whether you did it right, given you&#x27;re not a regular user of assistive technologies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AccessKit&#x2F;accesskit&quot;&gt;AccessKit&lt;&#x2F;a&gt; tries to help solve the first question, and has amongst others, been used to improve accessibility support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;slint-ui&#x2F;slint&#x2F;blob&#x2F;9b176ffb17fcdd33b2e16c70f07d7083228bdab2&#x2F;internal&#x2F;backends&#x2F;winit&#x2F;accesskit.rs#L97&quot;&gt;Slint&lt;&#x2F;a&gt;, a GUI toolkit**.&lt;&#x2F;p&gt;
&lt;p&gt;For the second question, I hope people will support their work and perhaps provide funding to them (or others) to develop a general test suite or framework which can be used by implementers of accessibility libraries***. In the mean time, I found that there is an &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn_web_development&#x2F;Core&#x2F;Accessibility&quot;&gt;introduction&lt;&#x2F;a&gt; on the topic over at MDN, which has a particular focus on accessibility for webpages, but also includes a more general introduction.&lt;&#x2F;p&gt;
&lt;p&gt;Matt will give a talk about &lt;a href=&quot;https:&#x2F;&#x2F;gribnau.dev&#x2F;posts&#x2F;rustweek-accessibility-and-rust-podcast&#x2F;AccessKit&quot;&gt;AccessKit&lt;&#x2F;a&gt; tomorrow at &lt;a href=&quot;https:&#x2F;&#x2F;time.is&#x2F;compare&#x2F;1025_14_May_2025_in_Utrecht&quot;&gt;10:25&lt;&#x2F;a&gt; local time (main track). RustWeek has a &lt;a href=&quot;https:&#x2F;&#x2F;rustweek.org&#x2F;live&#x2F;wednesday&#x2F;&quot;&gt;livestream&lt;&#x2F;a&gt; if you want to follow along online. Recordingss of talks will be published online at a later moment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;* Disclaimer: I also volunteered, props go to the other volunteers 😉.&lt;&#x2F;em&gt; &lt;br&gt;
&lt;em&gt;** I&#x27;m not involved with Slint in any way&lt;&#x2F;em&gt; &lt;br&gt;
&lt;em&gt;*** I may be ignorant of the existence of such a test suite; sorry!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Orphaned markdown [brackets]</title>
        <published>2025-04-19T00:00:00+00:00</published>
        <updated>2025-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/forgotten-brackets/"/>
        <id>https://gribnau.dev/posts/forgotten-brackets/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/forgotten-brackets/">&lt;p&gt;Every project needs a changelog. And let&#x27;s be honest, the work &lt;a href=&quot;https:&#x2F;&#x2F;keepachangelog.com&#x2F;en&#x2F;1.1.0&#x2F;&quot;&gt;keep-a-changelog&lt;&#x2F;a&gt; did to make this a more common practice is awesome. But there is something many seem to forget: Did you ever notice [version numbers] in release titles within a &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt;? These brackets were supposed to be &lt;a href=&quot;https:&#x2F;&#x2F;www.markdownguide.org&#x2F;basic-syntax&#x2F;#reference-style-links&quot;&gt;links&lt;&#x2F;a&gt;. But in reference style, you need to complete the reference elsewhere. Let&#x27;s look at an example (also in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mullvad&#x2F;mullvadvpn-app&#x2F;blob&#x2F;6d7b4ba7bdc497093dbd5861a8a6a4842574e6f7&#x2F;CHANGELOG.md&quot;&gt;wild&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;## [0.18.3] - 2025-04-19
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;- Lost: reference to the version number 0.18.3 somewhere
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This snippet, produces the following output:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;0-18-3-2025-04-19&quot;&gt;[0.18.3] - 2025-04-19&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Lost: references to version numbers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;However, if you scroll to the bottom of the keep-a-changelog &lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;olivierlacan&#x2F;keep-a-changelog&#x2F;refs&#x2F;heads&#x2F;main&#x2F;CHANGELOG.md&quot;&gt;example&lt;&#x2F;a&gt;, you can see that the version numbers in brackets, have their link completed at the bottom. And rendered, it looks like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;olivierlacan&#x2F;keep-a-changelog&#x2F;blob&#x2F;main&#x2F;CHANGELOG.md&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we fix our changelog? By adding reference style links:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;## [0.18.4] - 2025-04-19
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;- Found: references to version numbers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[0.18.4]: https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;compare&#x2F;v0.18.3...v0.18.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This produces the following output:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;0-18-4-2025-04-19&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;compare&#x2F;v0.18.3...v0.18.4&quot;&gt;0.18.4&lt;&#x2F;a&gt; - 2025-04-19&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Found: references to version numbers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;don-t-like-linking-to-the-diff&quot;&gt;Don&#x27;t like linking to the diff?&lt;&#x2F;h1&gt;
&lt;p&gt;Not a problem. Use an alternative like a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;releases&#x2F;tag&#x2F;v0.18.4&quot;&gt;release&lt;&#x2F;a&gt; page or something else you like. Or just leave the brackets out:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;0-18-5-2025-04-19&quot;&gt;0.18.5 - 2025-04-19&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Also good: This version number has no link&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;call-to-action&quot;&gt;Call to action&lt;&#x2F;h1&gt;
&lt;p&gt;So next time you write a changelog, please keep these digital tumbleweeds out. Complete your links, fix your [brackets]!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A sneak peek Into::&lt;Rust&gt; (slide deck, 2022)</title>
        <published>2025-02-27T00:00:00+00:00</published>
        <updated>2025-02-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/rust-slides/"/>
        <id>https://gribnau.dev/posts/rust-slides/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/rust-slides/">&lt;p&gt;Today I rediscovered a slide deck I made for a lunch talk I gave at the beginning
of 2022. It is an introduction to Rust, and specifically the features which made me fall in love with Rust since 2014.&lt;&#x2F;p&gt;
&lt;p&gt;It was aimed at an engineering audience consisting of among others
software engineers, mechanical engineers and control systems engineers.
Everyone in the audience had at least some programming experience.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to post it to my blog, in case anybody would like to use it for
inspiration, or would find it otherwise useful.&lt;&#x2F;p&gt;
&lt;p&gt;The slide deck can be found &lt;a href=&quot;&#x2F;pdf&#x2F;sneak_peek_into_rust.pdf&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;P.S. the title was a bit of an inside joke. It might not roll off the tongue as nicely as I would have wanted otherwise 🙃.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A few cargo-msrv 0.16 release highlights</title>
        <published>2024-10-09T00:00:00+00:00</published>
        <updated>2024-10-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/cargo-msrv-0-16/"/>
        <id>https://gribnau.dev/posts/cargo-msrv-0-16/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/cargo-msrv-0-16/">&lt;p&gt;A quick tour through some of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;releases&#x2F;tag&#x2F;v0.16.0&quot;&gt;&lt;code&gt;cargo msrv 0.16.0&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-cargo-msrv&quot;&gt;What is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&quot;&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;categories&#x2F;development-tools::cargo-plugins&quot;&gt;cargo plugin&lt;&#x2F;a&gt; which helps you
&quot;Find the minimum supported Rust version (MSRV) for your project&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Aside from finding the MSRV, it has additional tools baked in, such as listing the MSRV&#x27;s
of dependencies and verifying your (new) code against a given MSRV.&lt;&#x2F;p&gt;
&lt;p&gt;Find out more &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&quot;&gt;here&lt;&#x2F;a&gt; 😉.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-tour&quot;&gt;The tour&lt;&#x2F;h2&gt;
&lt;p&gt;The remainder of this post can also be found in the &lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;foresterre.github.io&#x2F;cargo-msrv&#x2F;releases&#x2F;v0.15_v0.16_highlights.html&quot;&gt;book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-noticeable-one-cargo-msrv-find&quot;&gt;The noticeable one - cargo msrv find&lt;&#x2F;h3&gt;
&lt;p&gt;The tagline of &lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; is &quot;Find the minimum supported Rust version (MSRV) for your project&quot;.
Previously, one could achieve this by running &lt;code&gt;cargo msrv&lt;&#x2F;code&gt;. If you want to do the same in 0.16, you instead
should run &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt;. The top level  &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; action is no more.&lt;&#x2F;p&gt;
&lt;p&gt;There are two primary reasons to move this action to a subcommand instead of keeping it at the top level:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Consistency: &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; can do more than that tagline, and placing all actions on the subcommand level signals that
they&#x27;re equals.&lt;&#x2F;li&gt;
&lt;li&gt;Unsupported CLI flags and options: When actions are placed on two layers, and one of these layers is below the other,
then the bottom layer inherits its flags and options, even though they do not always overlap. For example, the set of
CLI flags and options of &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; and &lt;code&gt;cargo msrv list&lt;&#x2F;code&gt; are not identical. &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; for example has
an option called &lt;code&gt;--release-source&lt;&#x2F;code&gt; which should be present for &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; but not for &lt;code&gt;cargo msrv list&lt;&#x2F;code&gt;. If
&lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; would still be run as &lt;code&gt;cargo msrv&lt;&#x2F;code&gt;, you could also invoke this option for &lt;code&gt;cargo msrv list&lt;&#x2F;code&gt;, like
so: &lt;code&gt;cargo msrv --release-source rust-dist list&lt;&#x2F;code&gt;. However, contextually, the &lt;code&gt;--release-source&lt;&#x2F;code&gt; option does not make
sense for &lt;code&gt;cargo msrv list&lt;&#x2F;code&gt;, so previously it was ignored. By making &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; a subcommand like
&lt;code&gt;cargo msrv list&lt;&#x2F;code&gt;, the flags and options which are not shared between all actions can be put solely below their own
subcommand.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;A consequence of (2) is that some unnecessary options and flags have been removed from the top level, and so this is a
breaking change, not just for &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; but also for &lt;code&gt;cargo msrv list&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Minor reasons for this change include that I can now talk about &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; as &quot;&lt;code&gt;cargo msrv find&lt;&#x2F;code&gt;&quot; instead of
&lt;code&gt;cargo msrv (find)&lt;&#x2F;code&gt; or &quot;the top level command&quot;. Plus, it addressed some difficulties around the code which does CLI
parsing, about which I wrote in &lt;a href=&quot;https:&#x2F;&#x2F;gribnau.dev&#x2F;posts&#x2F;puzzle-sharing-declarative-args-between-top-level-and-subcommand&quot;&gt;this&lt;&#x2F;a&gt;
previous post. I&#x27;m glad I opted to go this route instead though 😅.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-ui-part-1-output-format-options&quot;&gt;The UI part 1: output format options&lt;&#x2F;h3&gt;
&lt;p&gt;The way the UI is rendered has been updated. Internally, it is now easier to add and maintain different output formats.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; now supports 3 output formats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;human (the default one, intended for the human eye)&lt;&#x2F;li&gt;
&lt;li&gt;json (intended for machine readability)&lt;&#x2F;li&gt;
&lt;li&gt;minimal (*new*, it was requested for environments where people only care about success&#x2F;failure, such as CI)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-ui-part-2-cargo-msrv-find-and-verify-human-output&quot;&gt;The UI part 2: &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; and &lt;code&gt;verify&lt;&#x2F;code&gt; &quot;human&quot; output&lt;&#x2F;h3&gt;
&lt;p&gt;As they say, &quot;a picture is a thousand words&quot;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Previously...&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;465459&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;465459.svg&quot; alt=&quot;asciicast&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;New...&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;JGyYmk7LNJvfDrc2oMQEt0SFF&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;JGyYmk7LNJvfDrc2oMQEt0SFF.svg&quot; alt=&quot;asciicast&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll be iterating the UI further in the future. Constructive feedback is more than welcome!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-msrv-find-write-msrv&quot;&gt;&lt;code&gt;cargo msrv find --write-msrv&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This option will write the MSRV to your Cargo manifest:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;679863?t=47&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;679863.svg&quot; alt=&quot;asciicast&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-msrv-find-min-and-max&quot;&gt;&lt;code&gt;cargo msrv find --min&lt;&#x2F;code&gt; and &lt;code&gt;--max&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;--min&lt;&#x2F;code&gt; and &lt;code&gt;--max&lt;&#x2F;code&gt; options would previously only take three component semver versions like &quot;1.2.3&quot; or editions. It
is common to specify the MSRV in a two component version like &quot;1.2&quot;, so these are now also supported.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-msrv-verify-rust-version&quot;&gt;&lt;code&gt;cargo msrv verify --rust-version&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt; can be used to check whether your project is compatible with its MSRV. The MSRV is usually read from
the Cargo manifest (&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;). Sometimes it can be useful to provide it manually instead. That&#x27;s where this option
comes in handy.&lt;&#x2F;p&gt;
&lt;p&gt;It should be noted that &lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; does, at present, not unset any value you may have specified in the
Cargo manifest. So if you have a Cargo manifest with &lt;code&gt;rust-version = &quot;1.56.0&quot;&lt;&#x2F;code&gt; and supply the &lt;code&gt;--rust-version&lt;&#x2F;code&gt; option
with the value &lt;code&gt;1.55.0&lt;&#x2F;code&gt;, the cargo project will (if the default options are used) fail to compile, and as a consequence
&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; will report that your crate is not compatible with the specified MSRV.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fetching-the-rust-releases-index&quot;&gt;Fetching the rust releases index&lt;&#x2F;h3&gt;
&lt;p&gt;The rust releases index, the thing we use to figure out which Rust versions exist, are now only fetched when a
subcommand needs it (currently &lt;code&gt;cargo msrv find&lt;&#x2F;code&gt; and &lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-changelog&quot;&gt;The changelog&lt;&#x2F;h3&gt;
&lt;p&gt;The complete changelog can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;blob&#x2F;v0.16.0&#x2F;CHANGELOG.md&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to all contributors, whether you submitted a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;pulls&quot;&gt;PR&lt;&#x2F;a&gt; or reported
an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;issues&quot;&gt;issue&lt;&#x2F;a&gt;, or contributed in some other way.&lt;&#x2F;p&gt;
&lt;p&gt;Some of your issues and PR&#x27;s really made my day! 💛&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Puzzle: Sharing declarative args between top level and subcommand using Clap</title>
        <published>2024-06-25T00:00:00+00:00</published>
        <updated>2024-06-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/puzzle-sharing-declarative-args-between-top-level-and-subcommand/"/>
        <id>https://gribnau.dev/posts/puzzle-sharing-declarative-args-between-top-level-and-subcommand/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/puzzle-sharing-declarative-args-between-top-level-and-subcommand/">&lt;p&gt;Alternative title: &lt;em&gt;... And a short introduction to &lt;code&gt;cargo msrv&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h1&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&quot;&gt;cargo-msrv&lt;&#x2F;a&gt; we have the following situation. The top level command is used when &quot;finding the MSRV&quot; of a Rust project, while a subcommand can be used to verify that a specific MSRV works for a given project.&lt;&#x2F;p&gt;
&lt;p&gt;The former can be done by running &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; while the latter would be &lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once upon a time, an issue was reported that &lt;code&gt;cargo msrv --target x verify&lt;&#x2F;code&gt; worked, but &lt;code&gt;cargo msrv verify --target x&lt;&#x2F;code&gt; did not. Another Cargo tool used by the reporter, together with &lt;code&gt;cargo-msrv&lt;&#x2F;code&gt;, would always specify the latter form, so the former could not be used as a workaround.&lt;&#x2F;p&gt;
&lt;p&gt;While diving into this issue I figured, this should work:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cargo msrv --target x verify&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo msrv verify --target x&lt;&#x2F;code&gt; (equivalent to 2 for the user)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;But this should not:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo msrv --target x verify --target y&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The latter form is confusing to a user. If you allow both, you have to consider which takes precedence. Or whether they define the same thing.&lt;&#x2F;p&gt;
&lt;p&gt;This should also not work (since the &lt;code&gt;list&lt;&#x2F;code&gt; subcommand currently doesn&#x27;t use the &lt;code&gt;target&lt;&#x2F;code&gt; CLI argument at all):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo msrv --target x list&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo msrv list --target x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This post describes a short journey into the search for a satisfying solution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; uses &lt;code&gt;clap&lt;&#x2F;code&gt;, the most commonly used CLI argument parser (in the Rust library landscape). For the remainder of this post I will assume some familiarity with Rust and &lt;code&gt;clap&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background-on-cargo-msrv&quot;&gt;Background on cargo msrv&lt;&#x2F;h2&gt;
&lt;p&gt;This section can be useful to better understand this post since I decided to keep the original problem, instead of describing a more minimal reproduction. But feel free to skip this section (I might refer back to it though 😜).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A short history&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; was originally born out of a desire to find the MSRV for a Rust project (more specifically package). MSRV stands for &quot;minimal supported Rust version&quot; and is the earliest or oldest version supported by a Rust project. For different projects this may mean different things, but for this post I will consider &quot;support&quot; as &quot;does compile with a Rust toolchain of a certain version&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward a few years, and the MSRV has become somewhat more ubiquitous which can also be seen by its inclusion into Cargo as the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;manifest.html#the-rust-version-field&quot;&gt;rust-version&lt;&#x2F;a&gt;. Over time some additional tools were added to &lt;code&gt;cargo-msrv&lt;&#x2F;code&gt;. One of these was the &lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt; subcommand.&lt;&#x2F;p&gt;
&lt;p&gt;This subcommand can be used to check whether a Rust project supports its defined MSRV (e.g. via this &lt;code&gt;rust-version&lt;&#x2F;code&gt; field in the Cargo manifest). For example, in a CI pipeline you can use this to check whether your project works for the version you promised to your users.&lt;&#x2F;p&gt;
&lt;p&gt;Originally, I kept the &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; top level command aside from the subcommands for backwards compatibility reasons. In hindsight I probably shouldn&#x27;t have done that, but as is, their coexistence at least provides me with the opportunity to write this blog post 😅.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;How cargo msrv works&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I described the &quot;support&quot; from &quot;minimal supported Rust version&quot; (MSRV) above as the somewhat simplified &quot;does compile with a Rust toolchain of a certain version&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;You may write that as a function like so:  &lt;code&gt;fn is_compatible(version) -&amp;gt; bool&lt;&#x2F;code&gt;. If you run this test for some Rust version, when the function produces the value &lt;code&gt;true&lt;&#x2F;code&gt;, then we consider the Rust version to be supported. If instead the function produces the value &lt;code&gt;false&lt;&#x2F;code&gt;, then the Rust version is not supported.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo msrv&lt;&#x2F;code&gt; specifically searches for the &lt;em&gt;minimal&lt;&#x2F;em&gt; Rust version which is supported by a given Rust project. While there are some caveats, we build upon Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2014&#x2F;10&#x2F;30&#x2F;Stability.html#committing-to-stability&quot;&gt;stability promise&lt;&#x2F;a&gt; . In our case that is the idea that Rust versions are backwards compatible.&lt;&#x2F;p&gt;
&lt;p&gt;For a simple example to determine an MSRV, you can linearly walk backwards from the most recent Rust version to the earliest. When your project doesn&#x27;t compile for a specific Rust version, then the last version that did compile can be considered your MSRV.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s make it a bit more concrete with an example. For this example, we assume that Rust the following Rust versions exist: &lt;code&gt;1.0.0&lt;&#x2F;code&gt; up to and including &lt;code&gt;1.5.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Consider a project which uses the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;time&#x2F;struct.Duration.html#&quot;&gt;Duration&lt;&#x2F;a&gt; API which was stabilised by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;master&#x2F;RELEASES.md#version-130-2015-09-17&quot;&gt;Rust 1.3.0&lt;&#x2F;a&gt; (and nothing more recent 😉).&lt;&#x2F;p&gt;
&lt;p&gt;Then, if you would compile this project with Rust version from most recent to least recent, you would expect the following to happen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.5.0)&lt;&#x2F;code&gt; returns &lt;code&gt;true&lt;&#x2F;code&gt; ✅&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.4.0)&lt;&#x2F;code&gt; returns &lt;code&gt;true&lt;&#x2F;code&gt; ✅&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.3.0)&lt;&#x2F;code&gt; returns &lt;code&gt;true&lt;&#x2F;code&gt; ✅&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.2.0)&lt;&#x2F;code&gt; returns &lt;code&gt;false&lt;&#x2F;code&gt; ❌ (&quot;Duration is not stable&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.1.0)&lt;&#x2F;code&gt; returns &lt;code&gt;false&lt;&#x2F;code&gt; ❌&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;is_compatible(Rust 1.0.0)&lt;&#x2F;code&gt; returns false ❌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since we only care about the &lt;em&gt;minimal&lt;&#x2F;em&gt; Rust version, you could have stopped searching after compiling Rust 1.2.0; Rust 1.3.0 was the earliest released Rust version which worked.&lt;&#x2F;p&gt;
&lt;p&gt;In reality doing a linear search is quite slow (at the time of writing, there are 79 minor versions), so we primarily use a binary search instead to incrementally reduce the search space.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt; works quite similar to &quot;finding the MSRV&quot;, but instead of running a search which produces as primary output the MSRV, in this case the MSRV is already known in advance. So given a &lt;code&gt;MSRV&lt;&#x2F;code&gt; of &lt;code&gt;1.3.0&lt;&#x2F;code&gt; we just run the &lt;code&gt;is_compatible(Rust 1.3.0)&lt;&#x2F;code&gt; function once. If it returns &lt;code&gt;true&lt;&#x2F;code&gt; we can say that the 1.3.0 is an acceptable MSRV (although not necessarily strictly so). More importantly, if it returns false, then the specified version is actually not supported, and thus can not be an MSRV).&lt;&#x2F;p&gt;
&lt;p&gt;Enough background, back to the post.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;definition-of-the-cli&quot;&gt;Definition of the CLI&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;cargo-msrv&lt;&#x2F;code&gt; uses &lt;code&gt;clap&lt;&#x2F;code&gt; as its CLI argument parser. It nowadays uses the &lt;code&gt;macro derive&lt;&#x2F;code&gt; based API. In the code blocks below, I have isolated the primary definition of the CLI which describes the &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; top level command (a.k.a. &lt;code&gt;Find&lt;&#x2F;code&gt; in the code), and the &lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt; subcommand.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve taken the liberty to remove some unnecessary details, and added some arrows and comments for relevant items. Otherwise, this code is the copied directly from the actual source.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(version)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;CargoMsrvOpts {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- The top level, i.e. `cargo msrv {...}`
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find_opts&lt;&#x2F;span&gt;&lt;span&gt;: FindOpts, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- Options relevant for &amp;quot;find msrv&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shared_opts&lt;&#x2F;span&gt;&lt;span&gt;: SharedOpts, 
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(subcommand)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subcommand&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;SubCommand&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- Subcommands, like &amp;quot;verify&amp;quot; in &amp;quot;cargo msrv verify&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Find MSRV options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FindOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, conflicts_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linear&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bisect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;     #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, conflicts_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bisect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linear&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... omitted some options for brevity
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOptsFind,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;CargoMsrvOpts&lt;&#x2F;code&gt; is the top level CLI interface, i.e. &lt;code&gt;cargo msrv&lt;&#x2F;code&gt;.
The options relevant to &quot;finding the MSRV&quot; are specified on the top level (i.e. &lt;code&gt;FindOpts&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;FindOpts&lt;&#x2F;code&gt; should not be used for other subcommands (ironic considering this post, I know, at least &lt;code&gt;cargo msrv verify --help&lt;&#x2F;code&gt; doesn&#x27;t list them 😜).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Subcommand)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(propagate_version = true)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;SubCommand {  
&lt;&#x2F;span&gt;&lt;span&gt;    List(ListOpts),    
&lt;&#x2F;span&gt;&lt;span&gt;    Set(SetOpts),  
&lt;&#x2F;span&gt;&lt;span&gt;    Show,  
&lt;&#x2F;span&gt;&lt;span&gt;    Verify(VerifyOpts), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- The options for the verify subcommand
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Verify options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;VerifyOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOpts, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- The options we want to share between the top level &amp;quot;find msrv&amp;quot; (i.e. &amp;#39;cargo msrv&amp;#39;) and &amp;quot;verify msrv&amp;quot; subcommand (i.e. &amp;#39;cargo msrv verify&amp;#39;)  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust-version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rust_version&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;BareVersion&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Options supplied to the &lt;code&gt;verify&lt;&#x2F;code&gt; subcommand are specified by the &lt;code&gt;VerifyOpts&lt;&#x2F;code&gt; struct. As a user, you would interface with it like so: &lt;code&gt;cargo msrv verify {opts}&lt;&#x2F;code&gt;, e.g. &lt;code&gt;cargo msrv verify --target example&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RunnerOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rust_releases_opts&lt;&#x2F;span&gt;&lt;span&gt;: RustReleasesOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_opts&lt;&#x2F;span&gt;&lt;span&gt;: ToolchainOpts, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- The examples will use this one
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo_check_opts&lt;&#x2F;span&gt;&lt;span&gt;: CheckCommandOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Toolchain options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ToolchainOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TARGET&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;COMPONENT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_component&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RunnerOpts&lt;&#x2F;code&gt; specifies options relevant to run the &lt;code&gt;is_compatible&lt;&#x2F;code&gt; test I introduced in the &lt;em&gt;How cargo msrv works&lt;&#x2F;em&gt; section. What this actually entails is not relevant to this post. All you need to know is that each of these flattened commands define some arguments. I will use the arguments in &lt;code&gt;ToolchainOpts&lt;&#x2F;code&gt; for the examples:  &lt;code&gt;--target&lt;&#x2F;code&gt; (as my primary example) and &lt;code&gt;--add-component&lt;&#x2F;code&gt; (just to point out some edge cases).&lt;&#x2F;p&gt;
&lt;p&gt;The last detail I will add is that for both the &quot;find msrv&quot; top level command and each of the subcommands, we produce a flattened context which contains the inputs for that command. Both the &lt;code&gt;FindContext&lt;&#x2F;code&gt; and &lt;code&gt;VerifyContext&lt;&#x2F;code&gt; contain a &lt;code&gt;pub toolchain: ToolchainContext&lt;&#x2F;code&gt; field. The context is currently created via the &lt;code&gt;TryFrom&lt;&#x2F;code&gt; trait from the &lt;code&gt;Opts&lt;&#x2F;code&gt; (or resolved from the environment) to the &lt;code&gt;Context&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The fields in the &lt;code&gt;ToolchainContext&lt;&#x2F;code&gt; can be considered static for the duration of the program.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-goal&quot;&gt;The goal&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s make the problem a bit more concrete again.&lt;&#x2F;p&gt;
&lt;p&gt;First lets be explicit: the problem is limited to &quot;matching (in name and type) CLI arguments which can be provided to both &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; and &lt;code&gt;cargo msrv verify&lt;&#x2F;code&gt;&quot;, and I&#x27;ll mention that if no value is given for either, we use some default which we will assume just exists.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, (1) &lt;strong&gt;we want to end up with a CLI interface like &lt;code&gt;cargo msrv {top_level_arg} verify {subcommand_arg}&lt;&#x2F;code&gt; where a matching argument is provided to either the top level &lt;code&gt;xor&lt;&#x2F;code&gt; the subcommand &lt;code&gt;xor&lt;&#x2F;code&gt; use the default&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, (2) &lt;strong&gt;the matching args should not be available to subcommands, other than &lt;code&gt;verify&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the next section, I&#x27;m going to throw some ideas over the wall. To generate these ideas I primarily used the &lt;code&gt;clap&lt;&#x2F;code&gt; rustdoc documentation on &lt;a href=&quot;https:&#x2F;&#x2F;gribnau.dev&#x2F;posts&#x2F;puzzle-sharing-declarative-args-between-top-level-and-subcommand&#x2F;docs.rs&#x2F;clap%60&quot;&gt;docs.rs&lt;&#x2F;a&gt; as a reference.&lt;&#x2F;p&gt;
&lt;p&gt;Let me spoil it for you  in advance 🙄: None of these solutions really make me happy, so I will probably choose a pragmatic choice instead.&lt;&#x2F;p&gt;
&lt;p&gt;I mention this beforehand because I want to explicitly state that none of this is something I blame on &lt;code&gt;clap&lt;&#x2F;code&gt; (or anyone else). &lt;code&gt;clap&#x27;s&lt;&#x2F;code&gt; documentation is extensive, and is very well written. If it is described, then I didn&#x27;t look in the right places. It might just be a puzzle I haven&#x27;t solved yet 🧩.&lt;&#x2F;p&gt;
&lt;p&gt;Also, this scenario where you have a top level CLI and some subcommands which have to share some things is most likely non standard, and honestly, discouraged for similar reasons as why I&#x27;m putting this effort in: user experience.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;idea-1-merging-opts&quot;&gt;Idea 1: merging Opts&lt;&#x2F;h1&gt;
&lt;p&gt;A first idea is to keep the current definition and simply merge its values.&lt;&#x2F;p&gt;
&lt;p&gt;You may see some obvious flaws with this: first, goal (2) will not be met, since one of the &lt;code&gt;RunnerOpts&lt;&#x2F;code&gt; is defined on &lt;code&gt;FindOpts&lt;&#x2F;code&gt; which is at the top level of the CLI, so subcommands other than &lt;code&gt;verify&lt;&#x2F;code&gt; will also have allow the arguments defined by &lt;code&gt;RunnerOpts&lt;&#x2F;code&gt; to be specified (even though they will be ignored). Second, goal (1) is dependent on custom merging logic.&lt;&#x2F;p&gt;
&lt;p&gt;For this, let&#x27;s quickly consider the output which we would get from &lt;code&gt;clap&lt;&#x2F;code&gt; after it parsed the CLI arguments like in this idea (in simplified Rust code), to consider what it would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; opts = CargoMsrvOpts { ... }; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Output from Clap&amp;#39;s parse method
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; find_opts = opts.find_opts;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some(VerifyOpts(verify_opts)) = opts.subcommand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ todo!() };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; find_toolchain_opts = find_opts.runner_opts.toolchain_opts;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; verify_toolchain_opts = verify_opts.runner_opts.toolchain_opts;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code&gt;opts.subcommand&lt;&#x2F;code&gt; is not &lt;code&gt;Some(VerifyOpts(_))&lt;&#x2F;code&gt; then we can simply take all arguments from the &lt;code&gt;find_toolchain_opts&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;opts.subcommand&lt;&#x2F;code&gt; is &lt;code&gt;Some(VerifyOpts(_))&lt;&#x2F;code&gt;, then we would need to merge &lt;code&gt;find_toolchain_opts&lt;&#x2F;code&gt; and &lt;code&gt;verify_toolchain_opts&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of this merging code would likely be fairly trivial considering the limited common CLI input options and the XOR-or-default condition that &lt;code&gt;clap&lt;&#x2F;code&gt; would enforce if this concept worked.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Values which are marked as optional, i.e. via the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; type are trivial. If one is &lt;code&gt;Some&lt;&#x2F;code&gt;, then the other one must be &lt;code&gt;None&lt;&#x2F;code&gt; (by the  XOR-or-default condition).&lt;&#x2F;p&gt;
&lt;p&gt;Values which instead use a default value, may not be so clear cut. There is the question: did the user provide this default value, or was it omitted. The first case is a choice, similar to &lt;code&gt;Some&lt;&#x2F;code&gt;, while the second case is a fallback to a default like &lt;code&gt;None&lt;&#x2F;code&gt;. This information is no longer known after argument parsing.&lt;&#x2F;p&gt;
&lt;p&gt;The good news however is that we only need to compare two values per field. Consider &lt;code&gt;enum Choice { #[default] A, B, C }&lt;&#x2F;code&gt;. Since we know that at most only one of the two values was provided, since if our idea works, the argument parser rejects if the user provides both.&lt;&#x2F;p&gt;
&lt;p&gt;From an external point of view,  there are four options &lt;code&gt;A (default), A (provided), B and C&lt;&#x2F;code&gt;. However, we have to decide on a merged value for each pair just using their values &lt;code&gt;A, B and C&lt;&#x2F;code&gt;.  If values B or C, on both &lt;code&gt;find xor verify&lt;&#x2F;code&gt;, are given it is simple: by the XOR-or-default condition, B and C are always the user selected values. For A, we luckily do actually not need to care whether it was provided or not. If the other side provides B or C, it was the default (see previous), and if it is A, then we can simply use A.&lt;&#x2F;p&gt;
&lt;p&gt;-&amp;gt; I feel the merging&#x2F;selecting would likely be reasonably possible with this fairly simple scenario in mind, but haven&#x27;t put much thought into searching counter arguments where it doesn&#x27;t work (or proving that it always works for that matter).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yet, it would still all be a bit too hairy for my liking considering we use the &lt;code&gt;derive&lt;&#x2F;code&gt; API to get a nice declarative, clean looking argument parser.&lt;&#x2F;p&gt;
&lt;p&gt;Positives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The code (likely) compiles&lt;&#x2F;li&gt;
&lt;li&gt;The interface becomes no worse than it is today&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Negatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Custom merging logic on top of the declarative API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Currently my preferred choice, mostly because it won&#x27;t worsen the current user experience.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;idea-2-naming-a-command&quot;&gt;Idea 2: naming a command&lt;&#x2F;h1&gt;
&lt;p&gt;If we could name one of these derived commands, then we might get away with saying to &lt;code&gt;clap&lt;&#x2F;code&gt;:  &quot;the fields within this named command are incompatible with the fields in this other named command&quot;; i.e. I&#x27;m trying to apply some constraint.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Find MSRV options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FindOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, conflicts_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linear&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bisect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;     #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, conflicts_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bisect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linear&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... omitted some options for brevity
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten, id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_find&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, conflicts_with = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_verify&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOptsFind,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Verify options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;VerifyOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten, id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_verify&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOpts, 
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust-version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rust_version&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;BareVersion&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, this idea doesn&#x27;t quite cut it. Deriving &lt;code&gt;flatten&lt;&#x2F;code&gt; and supplying an &lt;code&gt;id&lt;&#x2F;code&gt; at the same time is not allowed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: methods are not allowed for flattened entry                                                                                                   
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src\cli\find_opts.rs:53:15
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;53 |     #[command(flatten, id = &amp;quot;runner_opts_find&amp;quot;, conflicts_with = [&amp;quot;runner_opts_verify&amp;quot;])]
&lt;&#x2F;span&gt;&lt;span&gt;   |               ^^^^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;--&lt;&#x2F;p&gt;
&lt;p&gt;If this idea would have worked, we also would still need to merge the &lt;code&gt;Opts&lt;&#x2F;code&gt; together, like in the last example.&lt;&#x2F;p&gt;
&lt;p&gt;The other reason why this idea is doomed is that when you put the id on the whole group of arguments, I suspect that once you give any argument in either the top level or the subcommand, all other values in the group must also be from the same group; otherwise they would be considered in conflict.&lt;&#x2F;p&gt;
&lt;p&gt;Considering &lt;code&gt;cargo msrv {group_top_level} verify {group_subcommand}&lt;&#x2F;code&gt;,  then &lt;code&gt;cargo msrv --target x --add-component y verify&lt;&#x2F;code&gt; or &lt;code&gt;cargo msrv verify  --target x --add-component y&lt;&#x2F;code&gt; would be fine, but mixing it up like  &lt;code&gt;cargo msrv --target x verify --add-component y&lt;&#x2F;code&gt; would be in conflict.&lt;&#x2F;p&gt;
&lt;p&gt;Positives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I can dream about a declarative only solution&lt;&#x2F;li&gt;
&lt;li&gt;Maybe this would work on an argument level?
&lt;ul&gt;
&lt;li&gt;I haven&#x27;t tried that yet&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Negatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Doesn&#x27;t compile&lt;&#x2F;li&gt;
&lt;li&gt;Likely wouldn&#x27;t work in the first place&lt;&#x2F;li&gt;
&lt;li&gt;If it did, it would likely work per whole group, so I would have to use a group per argument&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;idea-3-separate-structs-groups-and-conflicts&quot;&gt;Idea 3: Separate structs, groups and conflicts&lt;&#x2F;h1&gt;
&lt;p&gt;I also wanted to try a variation on the previous idea: this idea instead provides two &#x27;separately&#x27; nameable things, which then  can be marked to be in conflict with one another.&lt;&#x2F;p&gt;
&lt;p&gt;We only let the top level variant be in conflict with the subcommand variant, since the latter cannot exist without the former.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Find MSRV options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FindOpts {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOptsFind,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Verify options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;VerifyOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runner_opts&lt;&#x2F;span&gt;&lt;span&gt;: RunnerOptsVerify,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... etc.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NB: Should be kept in sync with `RunnerOptsVerify`!  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;(id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_find&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, conflicts_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_verify&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, multiple = true)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RunnerOptsFind {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rust_releases_opts&lt;&#x2F;span&gt;&lt;span&gt;: RustReleasesOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_opts&lt;&#x2F;span&gt;&lt;span&gt;: ToolchainOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo_check_opts&lt;&#x2F;span&gt;&lt;span&gt;: CheckCommandOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NB: Should be kept in sync with `RunnerOptsFind`!  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;(id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runner_opts_verify&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, multiple = true)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;RunnerOptsVerify {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rust_releases_opts&lt;&#x2F;span&gt;&lt;span&gt;: RustReleasesOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_opts&lt;&#x2F;span&gt;&lt;span&gt;: ToolchainOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(flatten)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo_check_opts&lt;&#x2F;span&gt;&lt;span&gt;: CheckCommandOpts,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, running results in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo run -- msrv verify --target x
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling cargo-msrv v0.16.0-beta.22 (C:\ws\cargo-msrv)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished `dev` profile [unoptimized + debuginfo] target(s) in 11.24s                                                                                                                                                      
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target\debug\cargo-msrv.exe msrv verify --target x`
&lt;&#x2F;span&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at C:\Users\x\.cargo\registry\src\index.crates.io-6f17d22bba15001f\clap_builder-4.5.7\src\builder\debug_asserts.rs:314:13:
&lt;&#x2F;span&gt;&lt;span&gt;Command msrv: Argument group &amp;#39;runner_opts_find&amp;#39; conflicts with non-existent &amp;#39;runner_opts_verify&amp;#39; id
&lt;&#x2F;span&gt;&lt;span&gt;stack backtrace:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s probably a logical explanation here why this doesn&#x27;t work; I guess I don&#x27;t properly understand how &lt;code&gt;ArgGroup&lt;&#x2F;code&gt; works...&lt;&#x2F;p&gt;
&lt;p&gt;Neutral:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I don&#x27;t seems to understand &lt;code&gt;ArgGroup&lt;&#x2F;code&gt; properly yet&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;idea-4-global-true&quot;&gt;Idea 4: global = true&lt;&#x2F;h1&gt;
&lt;p&gt;This was the first idea I had when I read the originally reported issue. It will again not satisfy goal (2), because marking a command as global, makes it, well, available to all subcommands.&lt;&#x2F;p&gt;
&lt;p&gt;This could however be a pragmatic choice, since in the current form they&#x27;re already present via the top level &lt;code&gt;FindOpts&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Args)]  
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(next_help_heading = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Toolchain options&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ToolchainOpts {  
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TARGET&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, global = true)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(long, value_name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;COMPONENT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, global = true)]  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_component&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I looked at this idea in more detail, I actually found that this may be considered slightly worse since &lt;code&gt;cargo msrv list --target x&lt;&#x2F;code&gt; would be valid when &lt;code&gt;global = true&lt;&#x2F;code&gt;, while the current form &#x27;only&#x27; allows &lt;code&gt;cargo msrv --target x list&lt;&#x2F;code&gt; (the residue of having the &lt;code&gt;FindOpts&lt;&#x2F;code&gt; at the top level). Plus, the current form does, for better or worse, not show the &lt;code&gt;FindOpts&lt;&#x2F;code&gt; help text when providing &lt;code&gt;--help&lt;&#x2F;code&gt; on the subcommand: i.e. &lt;code&gt;cargo msrv verify --help&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, it also doesn&#x27;t really satisfy goal (1). For example: &lt;code&gt;cargo msrv --add-component a --add-component b --target x verify --add-component c --add-component d --target y&lt;&#x2F;code&gt; , produces:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;toolchain: ToolchainContext {
&lt;&#x2F;span&gt;&lt;span&gt;        target: &amp;quot;y&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        components: [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;c&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;d&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While,  &lt;code&gt;cargo msrv --target x --add-component a verify --add-component b --target y --target z&lt;&#x2F;code&gt; ,  does result in :&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;error: the argument &#x27;--target &amp;lt;TARGET&amp;gt;&#x27; cannot be used multiple times&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Positives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The code compiles&lt;&#x2F;li&gt;
&lt;li&gt;Most simple scenarios work&lt;&#x2F;li&gt;
&lt;li&gt;It doesn&#x27;t need hairy merging code (on the surface)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Negatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The interface will allow additional ignored arguments for subcommands other than verify
&lt;ul&gt;
&lt;li&gt;This list can grow large if all of &lt;code&gt;RunnerOpts&lt;&#x2F;code&gt; arguments are included&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Mixed usage does not limit the &lt;code&gt;num_args&lt;&#x2F;code&gt; for &lt;code&gt;Args&lt;&#x2F;code&gt; on a global level&lt;&#x2F;li&gt;
&lt;li&gt;Mixed usage overwrites values specified on a deeper subcommand level
&lt;ul&gt;
&lt;li&gt;Behaviour can possibly be changed with &lt;code&gt;ArgAction&lt;&#x2F;code&gt; (?)&lt;&#x2F;li&gt;
&lt;li&gt;This wouldn&#x27;t be a problem if on a global level  it is possible to enforce that arguments could be only provided to one level &#x2F; for non collection types, that the &lt;code&gt;num_args&lt;&#x2F;code&gt; would be complied with on the global level&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Mixed usage is unintuitive for a user&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;remarks-on-using-clap&quot;&gt;Remarks on using Clap&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;In this likely non-standard use case.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clap-s-api-surface&quot;&gt;Clap&#x27;s API surface&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Clap&lt;&#x2F;code&gt; has grown quite the set of options. There&#x27;s something for everyone. It may very well still be possible to fulfill the use case I described above. Just because I couldn&#x27;t find it after searching for it for a while doesn&#x27;t mean it doesn&#x27;t exist. In the end, I  decided to choose pragmatic over pure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skip&quot;&gt;Skip&lt;&#x2F;h2&gt;
&lt;p&gt;Many attributes define the magic &lt;code&gt;skip&lt;&#x2F;code&gt; option. It is available for &lt;code&gt;ArgGroup&lt;&#x2F;code&gt; and &lt;code&gt;Arg&lt;&#x2F;code&gt;. It is not available to &lt;code&gt;Command&lt;&#x2F;code&gt; in general (a variation with different behaviour is on &lt;code&gt;Subcommand&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;At first it sounded like  logical name for the something I&#x27;m looking for, however it ignores fields and sets a provided expression (or Default::default if omitted), so this doesn&#x27;t feel like it works.&lt;&#x2F;p&gt;
&lt;p&gt;Aside: what kind of expression should I even put in, even if it fulfilled my use case; you would need to be able to refer to something which ought to be skipped. In my case that would be conditionally skipping if the subcommand is &lt;code&gt;Some(s) where S is not Verify&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;command-args-conflicts-with-subcommands&quot;&gt;Command::args_conflicts_with_subcommands&lt;&#x2F;h2&gt;
&lt;p&gt;For a second, I hoped that if a command could be marked with  &lt;code&gt;args_conflicts_with_subcommands&lt;&#x2F;code&gt;  we could then reject all&lt;br &#x2F;&gt;
subcommands which are not &lt;code&gt;verify&lt;&#x2F;code&gt;, but this method &lt;code&gt;args_conflicts_with_subcommands(...)&lt;&#x2F;code&gt; takes a bool;  not a list of subcommands... 😭, and has another use case altogether...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shared-value-state&quot;&gt;Shared value state&lt;&#x2F;h2&gt;
&lt;p&gt;At some point I had a fleeting wish that there could be a &lt;code&gt;GroupArg&lt;&#x2F;code&gt; (or something else altogether) where values share their state.&lt;&#x2F;p&gt;
&lt;p&gt;I.e. given a group &lt;code&gt;G&lt;&#x2F;code&gt;, defined on the top level as &lt;code&gt;G_t&lt;&#x2F;code&gt; and on a subcommand as &lt;code&gt;G_s&lt;&#x2F;code&gt;, when setting a value  for &lt;code&gt;G_t&lt;&#x2F;code&gt; or &lt;code&gt;G_s&lt;&#x2F;code&gt;, their value state would be shared. Still just this would not solve the most prominent problem, i.e. for the user we want to explicitly allow just one of each argument for any &lt;code&gt;i&lt;&#x2F;code&gt; in &lt;code&gt;G_i&lt;&#x2F;code&gt; to be defined...&lt;&#x2F;p&gt;
&lt;p&gt;I suppose, this is not dissimilar to &lt;code&gt;global = true&lt;&#x2F;code&gt; on &lt;code&gt;Args&lt;&#x2F;code&gt;, except for some action override since &lt;code&gt;global = true&lt;&#x2F;code&gt; doesn&#x27;t work intuitively by default for args defined on mixed levels.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;derive-and-groups&quot;&gt;Derive and groups&lt;&#x2F;h2&gt;
&lt;p&gt;When using derive, it is not always straightforward to get an &lt;code&gt;Arg&lt;&#x2F;code&gt; from a group, since we have the derived structs; not &lt;code&gt;ArgMatches&lt;&#x2F;code&gt;. With &lt;code&gt;ArgMatches&lt;&#x2F;code&gt; you can, if I understand the documentation correctly, get the value of the group using one of the &lt;code&gt;get_{}&lt;&#x2F;code&gt; methods on &lt;code&gt;ArgMatches&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Possibly I could hack this together by using &lt;code&gt;ArgAction::set&lt;&#x2F;code&gt; with &lt;code&gt;Command::args_override_self(true)&lt;&#x2F;code&gt; ..?&lt;&#x2F;p&gt;
&lt;p&gt;I still think I don&#x27;t really understand the true value of &lt;code&gt;ArgGroup&lt;&#x2F;code&gt;. The &quot;a group of shared commands&quot; I was looking for is probably something else entirely. 😉&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;If you, dear reader, by any chance know how to solve the issue of this post, or have other ideas: I love &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;issues&#x2F;936&quot;&gt;to learn&lt;&#x2F;a&gt; (about them). &lt;sup&gt;You also send me a mail, or contact me in another way, see my GitHub profile.&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the mean time, I suppose that this just isn&#x27;t the way forward. To meet goal (2) in particular, having some shared arguments also at the top level makes solving the issue a lot harder. I tried to add constraints on how this definition could be used, but none of these really worked out.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe it is finally time to sunset the &lt;code&gt;cargo msrv&lt;&#x2F;code&gt; top level command and introduce a dedicated subcommand for &quot;find your msrv&quot; instead.&lt;&#x2F;p&gt;
&lt;p&gt;p.s. I kind of wrote this all on a whim, so it may be full of mistakes 🫧.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thanks&quot;&gt;Thanks!&lt;&#x2F;h1&gt;
&lt;p&gt;This post is based on an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;cargo-msrv&#x2F;issues&#x2F;936&quot;&gt;issue&lt;&#x2F;a&gt; originally reported by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Finomnis&quot;&gt;Finomnis&lt;&#x2F;a&gt; , thanks!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A tale of setInterval and useEffect in React Native</title>
        <published>2024-04-19T00:00:00+00:00</published>
        <updated>2024-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/setinterval-and-friends-in-react-native/"/>
        <id>https://gribnau.dev/posts/setinterval-and-friends-in-react-native/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/setinterval-and-friends-in-react-native/">&lt;p&gt;At work, I&#x27;ve been building a new &lt;a href=&quot;https:&#x2F;&#x2F;reactnative.dev&quot;&gt;React Native&lt;&#x2F;a&gt; app.  Initially, I wanted this app to be as simple
as possible, to allow for quick iterative cycles.&lt;&#x2F;p&gt;
&lt;p&gt;Now this app needs to refetch a certain resource from the server in regular intervals. I have to admit: I briefly considered
to use &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;query&#x2F;v3&#x2F;docs&#x2F;framework&#x2F;react&#x2F;react-native&quot;&gt;React Query&lt;&#x2F;a&gt;, but decided it wasn&#x27;t quite time
for that yet. Simple first. Complex later.&lt;&#x2F;p&gt;
&lt;p&gt;I looked at the React Native
docs in an attempt for figure out what the canonical way of doing this was. The docs told me: &quot;hey, you can use
the &lt;code&gt;Timers&lt;&#x2F;code&gt; module which contains &lt;code&gt;setInterval&lt;&#x2F;code&gt; and &lt;code&gt;clearInterval&lt;&#x2F;code&gt;&quot;. Just what I needed!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;setInterval&lt;&#x2F;code&gt; executes a callback after a given milliseconds delay. It doesn&#x27;t have the option to
immediately fire, however. Luckily it&#x27;s not hard to work around this: for example by
just executing the function provided in the callback first.&lt;&#x2F;p&gt;
&lt;p&gt;As an alternative, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;setInterval#ensure_that_execution_duration_is_shorter_than_interval_frequency&quot;&gt;MDN&lt;&#x2F;a&gt;
suggested that you could also use &lt;code&gt;setTimeout&lt;&#x2F;code&gt;, although in my case, the execution duration is shorter than the interval
frequency, so I figured everything should be fine 🤞.&lt;&#x2F;p&gt;
&lt;p&gt;To give an idea of what the code looked like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MyComponent&lt;&#x2F;span&gt;&lt;span&gt;(): React.JSX.Element {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetchResource&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }, []);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetchResource&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setOk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: unknown) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceErrorParser&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parseError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now one of the most useful features of React Native, is its ability to live inspect changes you just made.
Running the &lt;a href=&quot;https:&#x2F;&#x2F;metrobundler.dev&quot;&gt;Metro&lt;&#x2F;a&gt; development server in combination with a debug build of the app gives you
live updates out of the box. For me, that&#x27;s simply running &lt;code&gt;npm run start&lt;&#x2F;code&gt; to start Metro and in a second
terminal tab &lt;code&gt;npm run android&lt;&#x2F;code&gt; to build a debug build of the app and install it on a device (or emulator).&lt;&#x2F;p&gt;
&lt;p&gt;Now, changes made to components or other code can be updated, and the changes can be observed on the app without
rebuilding. Great!&lt;&#x2F;p&gt;
&lt;p&gt;One day, I was checking the logs in the Metro terminal app, and I there seemed to be a few too many fetches to the backend.
Normally, it should refetch the resource every 10 seconds or so (or immediately after certain actions), now it was
making requests to fetch the resource tens of times per second. Whoops.&lt;&#x2F;p&gt;
&lt;p&gt;So what happened? The callback in &lt;code&gt;useEffect&lt;&#x2F;code&gt; was being rerendered after each change in the code. And as a result, the
&lt;code&gt;setInterval&lt;&#x2F;code&gt; function was being rerun as well. On repeat. Oops 😅.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, it can be fixed! As it turns out, &lt;code&gt;setInterval&lt;&#x2F;code&gt; can return a clean up function, which runs when the component
unmounts (or when the props get updated and the dependencies provided to the &lt;code&gt;useEffect&lt;&#x2F;code&gt; have been changed, or even every rerender
if no dependency array is provided):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Id = ReturnType&amp;lt;typeof setInterval&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; elsewhere:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OtherComponent&lt;&#x2F;span&gt;&lt;span&gt;(): React.JSX.Element {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refetchId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setRefetchId&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Id | undefined&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MyComponent id={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refreshId&lt;&#x2F;span&gt;&lt;span&gt;} setId={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setRefetchId&lt;&#x2F;span&gt;&lt;span&gt;} onClear={() =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setRefetchId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;)} &#x2F;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MyComponent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;?: Id; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setId&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: Id) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;void; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onClear&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;void;  }): React.JSX.Element {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetchResource&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clearInterval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;);        
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }, []);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the dependency array can be empty, since we only want to disable the fetch task if the component is unmounted.
Otherwise it can just do its thing and fetch the resource at each specific interval. And you know what. That&#x27;s good
enough for me, ... at least for now.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Wishlist: I wish there was a way to see all active useIntervals and useTimeouts: if you know a way (without storing the
id with some state management utility): please &lt;a href=&quot;https:&#x2F;&#x2F;gribnau.dev&#x2F;posts&#x2F;setinterval-and-friends-in-react-native&#x2F;(https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;foresterre.github.io&#x2F;discussions)&quot;&gt;let me know&lt;&#x2F;a&gt; 🙏&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;I did end up extending the functionality ever so slightly: I added the option to toggle refreshing altogether and changed when refetches happen,
to reschedule the interval when a manual refresh happened (which happens after certain actions) 😅.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;feedback-discussion&quot;&gt;Feedback &amp;amp; discussion&lt;&#x2F;h1&gt;
&lt;p&gt;Feedback is most welcome. Feel free to discuss at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;foresterre.github.io&#x2F;discussions&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s new in Yare 3.0.0 (A lean parameterized testing macro for Rust)</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/parameterized-macro-yare-v3/"/>
        <id>https://gribnau.dev/posts/parameterized-macro-yare-v3/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/parameterized-macro-yare-v3/">&lt;h1 id=&quot;what-is-yare&quot;&gt;What is Yare?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;yare&quot;&gt;Yare&lt;&#x2F;a&gt; is a lean parameterized testing macro for Rust.&lt;&#x2F;p&gt;
&lt;p&gt;This practically means that when using &lt;code&gt;#[yare::parameterized]&lt;&#x2F;code&gt;, it is easier to write a test scenario,
which can be tested against multiple different inputs. Each set of inputs is a separate test case.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    apple = { Fruit::Apple, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    pear = { Fruit::Pear, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pear&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    blackberry = { Fruit::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bramble&lt;&#x2F;span&gt;&lt;span&gt;(BrambleFruit::Blackberry), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blackberry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_fruity_test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fruit&lt;&#x2F;span&gt;&lt;span&gt;: Fruit, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(fruit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name_of&lt;&#x2F;span&gt;&lt;span&gt;(), name)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above scenario will generate 3 test cases: &lt;code&gt;apple&lt;&#x2F;code&gt;, &lt;code&gt;pear&lt;&#x2F;code&gt; and &lt;code&gt;blackberry&lt;&#x2F;code&gt;, while it was only necessary to specify the
scenario once.&lt;&#x2F;p&gt;
&lt;p&gt;As you might imagine, if your add more tests, the removal of duplicated test cases does not only save
writing (and maintenance!) time, but makes it also easier to keep scenarios the same for a large set of inputs (especially
while refactoring code, changes to test scenarios may sneak in, which should also have applied to equivalent inputs).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-new-in-3-0-0&quot;&gt;What&#x27;s new in 3.0.0&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;custom-test-macro-e-g-tokio-test&quot;&gt;Custom test macro (e.g. tokio::test)&lt;&#x2F;h2&gt;
&lt;p&gt;Prior to 3.0.0, Yare would always generate test cases with the Rust built in &lt;code&gt;#[test]&lt;&#x2F;code&gt; attribute. While it is exceptionally
useful to have this macro built in, at times you may want to use a different macro because the built-in one doesn&#x27;t support
a feature you need.&lt;&#x2F;p&gt;
&lt;p&gt;A common example is the &lt;code&gt;tokio::test&lt;&#x2F;code&gt; macro, when using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt;
asynchronous runtime. While you could create your own &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Runtime.html#method.spawn&quot;&gt;Runtime&lt;&#x2F;a&gt;
and spawn futures onto this runtime for your test cases, it is perhaps not as elegant as using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;attr.test.html&quot;&gt;tokio::test&lt;&#x2F;a&gt;
macro.&lt;&#x2F;p&gt;
&lt;p&gt;With this use case in mind, Yare can now be used with user specified test macro&#x27;s. If none is specified, the Rust built-in
&lt;code&gt;#[test]&lt;&#x2F;code&gt; will be used.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    zero_wait = { 0, 0 },
&lt;&#x2F;span&gt;&lt;span&gt;    show_paused = { 500, 0 },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(tokio::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(start_paused = true))]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time_elapsed&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::time::sleep(tokio::time::Duration::from_millis(wait)).await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(time_elapsed, start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_millis&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to use `start_paused = true`, enable the test-util feature for your tokio dependency
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; example inspired by: https:&#x2F;&#x2F;tokio.rs&#x2F;tokio&#x2F;topics&#x2F;testing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h3&gt;
&lt;p&gt;To make this work, the &lt;code&gt;#[parameterized(...)]&lt;&#x2F;code&gt; attribute in Yare parses all attributes placed after it (all attributes must be placed on top of the
test function):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::{Parse, ParseStream, Result};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Attribute {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; A regular attribute, which isn&amp;#39;t named &amp;quot;test_macro&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; NB: Attribute and syn::Attribute are not the same!
&lt;&#x2F;span&gt;&lt;span&gt;    Normal(syn::Attribute),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; An attribute named &amp;quot;test_macro&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    TestMacro(syn::Meta),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;TestFn {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Attribute&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt;: syn::ItemFn,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Parse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TestFn {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: ParseStream) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(TestFn {
&lt;&#x2F;span&gt;&lt;span&gt;            attributes: input
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(syn::Attribute::parse_outer)?
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ident&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        attr.parse_args::&amp;lt;syn::Meta&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(Attribute::TestMacro)
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        Ok(Attribute::Normal(attr))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;                .collect::&amp;lt;Result&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;&amp;gt;()?,
&lt;&#x2F;span&gt;&lt;span&gt;            fun: input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;()?,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So for the following Rust source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    red = { FunctionColor::Red },
&lt;&#x2F;span&gt;&lt;span&gt;    blue = { FunctionColor::Blue },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(function_color::test_macro)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;should_panic&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;: FunctionColor) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We end up with 1 test_macro attribute and 1 &quot;normal&quot; attribute (i.e. not test_macro):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;vec![
&lt;&#x2F;span&gt;&lt;span&gt;    Attribute::TestMacro(syn::Meta::parse(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_macro(function_color::test_macro)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; hypothetically, if a &amp;amp;str would be a syn::ParseStream
&lt;&#x2F;span&gt;&lt;span&gt;    Attribute::Normal(syn::Attribute::parse(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#[should_panic]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the code generation phase, we can obtain these separately from &lt;code&gt;TestFn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestFn {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;syn::Attribute&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .attributes
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(Attribute::to_normal)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; syn::Meta {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.attributes
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_map&lt;&#x2F;span&gt;&lt;span&gt;(Attribute::to_test_macro) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NB: We elsewhere asserted that there&amp;#39;s at most one of these. 
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A definition for the default #[test] macro
&lt;&#x2F;span&gt;&lt;span&gt;                syn::Meta::Path(syn::Path::from(syn::Ident::new(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    proc_macro2::Span::call_site(),
&lt;&#x2F;span&gt;&lt;span&gt;                )))
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally during generation itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestCase {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_token_stream&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_fn&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;TestFn) -&amp;gt; Result&amp;lt;proc_macro2::TokenStream&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; test_meta = test_fn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;test_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attributes = test_fn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Many other things omitted...
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(quote::quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #[#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_meta&lt;&#x2F;span&gt;&lt;span&gt;]   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- Our custom macro attribute, or #[test] if none was specified
&lt;&#x2F;span&gt;&lt;span&gt;            #(#attributes)* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- The &amp;quot;normal&amp;quot; attributes, reproduced
&lt;&#x2F;span&gt;&lt;span&gt;            #visibility #constness #asyncness #unsafety #abi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;identifier&lt;&#x2F;span&gt;&lt;span&gt;() #return_type {
&lt;&#x2F;span&gt;&lt;span&gt;                #bindings
&lt;&#x2F;span&gt;&lt;span&gt;                #body
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the code generation phase of the macro has been completed, the parameterized test function will have been substituted by two separate test functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_color&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;should_panic&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_color&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;should_panic&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gotchas-to-be-aware-of&quot;&gt;Gotchas to be aware of&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; attribute must be placed after &lt;code&gt;#[parameterized]&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like all macro&#x27;s, &lt;code&gt;yare::parameterized&lt;&#x2F;code&gt; can only parse the available scope. Since &lt;code&gt;yare::parameterized&lt;&#x2F;code&gt; is supposed
to be placed on top of functions, we can access our own attribute (which we use to parse the test case identifier and arguments for test cases)
and the function underneath (used to specify the parameters and test scenario in the function body).&lt;&#x2F;p&gt;
&lt;p&gt;While &lt;code&gt;yare::parameterized&lt;&#x2F;code&gt; does have access to attributes placed after it, the ones which come before it, are inaccessible.&lt;&#x2F;p&gt;
&lt;p&gt;Subsequently, &lt;code&gt;yare::parameterized&lt;&#x2F;code&gt; can only recognize placements of &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; which come after it.&lt;&#x2F;p&gt;
&lt;p&gt;So, the following is ok:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    wow = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wow!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    whew = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;whew!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(tokio::test)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this doesn&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(tokio::test)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    wow = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wow!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    whew = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;whew!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;One &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; per parameterized test function&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yare currently accepts one &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; for a parameterized test function. The following is not allowed and will return an error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    wow = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wow!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    whew = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;whew!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(tokio::test)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro&lt;&#x2F;span&gt;&lt;span&gt;(tokio::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(start_paused = true))]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Returned error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: Expected at most 1 #[test_macro(...)] attribute, but 2 were given
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; tests&#x2F;fail&#x2F;multiple_test_macro_attributes.rs:8:14
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;8 | #[test_macro(tokio::test(start_paused = true))]
&lt;&#x2F;span&gt;&lt;span&gt;  |              ^^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason is that it&#x27;s unclear what should happen when multiple &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; attributes are present.
Should the first one be used by  &lt;code&gt;#[parameterized(...)]&lt;&#x2F;code&gt;, and subsequent be left in place? Or would that just be
confusing, if only because the test author will need to keep track of which macro uses which attributes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Renaming attributes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yare&#x27;s parameterized attribute can be used with a different name if you would like, by rebinding the target import
part under a local name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized as test_macro_for_twitchcraft_and_lizardry; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- Rebinding!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_macro_for_twitchcraft_and_lizardry&lt;&#x2F;span&gt;&lt;span&gt;(                             &amp;lt;-- Usage
&lt;&#x2F;span&gt;&lt;span&gt;    gryffinroar = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gryffinroar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    hufflefluff = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hufflefluff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    ravenpaw = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ravenpaw&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    slytherfin = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Slytherfin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;houses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, since the &lt;code&gt;#[test_macro(...)]&lt;&#x2F;code&gt; is parsed by &lt;code&gt;yare::parameterized&lt;&#x2F;code&gt;, it cannot be renamed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extended-function-qualifier-support&quot;&gt;Extended function qualifier support&lt;&#x2F;h2&gt;
&lt;p&gt;Previously, when Yare was still written to support mostly just the built-in &lt;code&gt;#[test]&lt;&#x2F;code&gt; macro, it wasn&#x27;t so useful to
support the function qualifiers: &lt;code&gt;const&lt;&#x2F;code&gt;, &lt;code&gt;async&lt;&#x2F;code&gt;, &lt;code&gt;unsafe&lt;&#x2F;code&gt; and &lt;code&gt;extern&lt;&#x2F;code&gt;. Firstly, because half of these aren&#x27;t even
supported by &lt;code&gt;#[test]&lt;&#x2F;code&gt;. For the ones that are, namely &lt;code&gt;const&lt;&#x2F;code&gt; and &lt;code&gt;extern&lt;&#x2F;code&gt;, the I deemed the usefulness to be limited.
For example: with &lt;code&gt;const&lt;&#x2F;code&gt; you can&#x27;t use the commonly used &lt;code&gt;assert_eq!&lt;&#x2F;code&gt; since the &lt;code&gt;PartialEq&lt;&#x2F;code&gt; trait is not marked as &lt;code&gt;const&lt;&#x2F;code&gt;. And regarding &lt;code&gt;extern&lt;&#x2F;code&gt;, I&#x27;ve never seen anyone call unit test functions over FFI (but if you do, I would like to know, it does sound fun 😅).&lt;&#x2F;p&gt;
&lt;p&gt;However, with custom test macro&#x27;s, you want at least support for &lt;code&gt;async&lt;&#x2F;code&gt; and maybe for &lt;code&gt;unsafe&lt;&#x2F;code&gt;. Adding the other two is hardly more work, so I also added &lt;code&gt;const&lt;&#x2F;code&gt; and &lt;code&gt;extern&lt;&#x2F;code&gt; for completeness.&lt;&#x2F;p&gt;
&lt;p&gt;NB: when specifying one ore more qualifiers in the function definition of your test function, the underlying test macro (whether &lt;code&gt;#[test]&lt;&#x2F;code&gt; or a custom macro &lt;code&gt;#[test_macro(x)]&lt;&#x2F;code&gt;) must also support the specified qualifiers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yare::parameterized;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NB: The underlying test macro also must support these qualifiers. For example, the default `#[test]` doesn&amp;#39;t support async and unsafe.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parameterized&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    purple = { &amp;amp;[128, 0, 128] },
&lt;&#x2F;span&gt;&lt;span&gt;    orange = { &amp;amp;[255, 127, 0] },
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const extern &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;has_reds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamed_color&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(streamed_color.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ideas-feedback-and-bug-reports-for-yare&quot;&gt;Ideas, feedback and bug reports for Yare&lt;&#x2F;h1&gt;
&lt;p&gt;Ideas, feedback and bug reports are most welcome. Feel free to open an issue on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;yare&#x2F;issues&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;discuss-this-post&quot;&gt;Discuss this post&lt;&#x2F;h1&gt;
&lt;p&gt;Discuss on &lt;a href=&quot;https:&#x2F;&#x2F;reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;1b9ijs6&#x2F;yare_v300_a_lean_parameterized_testing_macro_for&#x2F;&quot;&gt;Reddit&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using the todo! macro to prototype your API in Rust</title>
        <published>2023-04-24T00:00:00+00:00</published>
        <updated>2023-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Martijn Gribnau
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gribnau.dev/posts/todo-macro-rust/"/>
        <id>https://gribnau.dev/posts/todo-macro-rust/</id>
        
        <content type="html" xml:base="https://gribnau.dev/posts/todo-macro-rust/">&lt;p&gt;Let&#x27;s sketch a situation. You&#x27;re designing and implementing a library in Rust, for some great idea you had. And, you aim to create a seamless API that makes this library user-friendly not only for others, but also for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;One way to figure out the design of the library is to write a prototype, and write the bare minimum code to stub out the the initial API.
I hear you think: Rust is not to most convenient prototyping language, because it&#x27;s quite strict and verbose: we have to satisfy the borrow checker and, in many places, Rust requires you to explicitely type your code. And altough I believe both will help you design better code, I can also understand the argument that it reduces the prototyping velocity at least a bit.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily for us, the Rust standard library has a useful tool in its toolbox: the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.todo.html&quot;&gt;todo!&lt;&#x2F;a&gt; macro.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at an example. Imagine&lt;sup&gt;&lt;a href=&quot;#footnote1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; we&#x27;re re-designing a Rust API to fetch Rust releases metadata.&lt;&#x2F;p&gt;
&lt;p&gt;We will first prototype a few data structures around the concept of &quot;releases&quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; A data structure consisting of the set of known Rust releases.  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Whether a release is known, and how much information is known
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; about a release, depends on the source used to build up this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; information.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RustReleases {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We divide all releases by platform, so we end up with the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set of available toolchains for each platform.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registry&lt;&#x2F;span&gt;&lt;span&gt;: HashMap&amp;lt;rust_toolchain::Platform, ReleaseRecords&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; A set of releases, for a single platform.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ReleaseRecords {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;releases&lt;&#x2F;span&gt;&lt;span&gt;: BTreeSet&amp;lt;Release&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; A single release. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; In this example, we define a release as a toolchain of a specific
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; version (stable, beta) or date (nightly), and its associated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; components.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain&lt;&#x2F;span&gt;&lt;span&gt;: rust_toolchain::Toolchain,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Rustup has the concept of components and extensions.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; When installing a toolchain, components are installed by default, while extensions are optional components.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; In this implementation, they&amp;#39;re combined.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;rust_toolchain::Component&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let&#x27;s consider how we want to use the data captured by these data structures.
For example, we may want to find the most recently released Rust release:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ReleaseRecords {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Find the most recent Rust release.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns `None` if no release could be found.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;last_released&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&amp;amp;Release&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See that &lt;code&gt;todo!&lt;&#x2F;code&gt; macro 😃? Instead of providing an actual, or fake, implementation which needs to satisfy the return type of our method, we placed a &lt;code&gt;todo!&lt;&#x2F;code&gt; macro in the body.
This allows us to not worry about our implementation just yet, so we can focus on the design of our API instead.&lt;&#x2F;p&gt;
&lt;p&gt;It also accepts the same arguments as &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.panic.html&quot;&gt;panic!&lt;&#x2F;a&gt;, so the following will work as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;release_date&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; rust_toolchain::ReleaseDate {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;release date of the toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_component&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;find component with name: &amp;#39;{name}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run the &lt;code&gt;find_component&lt;&#x2F;code&gt; method, we&#x27;ll find that it panics the thread, and shows the panic message we provided, prefixed with &quot;not yet implemented&quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;not yet implemented: find component with name: &amp;#39;hello-world&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;thread &amp;#39;tests::find_component&amp;#39; panicked at &amp;#39;not yet implemented: find component with name: &amp;#39;hello-world&amp;#39;&amp;#39;, crates&#x2F;rust-releases-core&#x2F;src&#x2F;lib.rs:77:9
&lt;&#x2F;span&gt;&lt;span&gt;stack backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;   0: std::panicking::begin_panic_handler
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc&#x2F;library&#x2F;std&#x2F;src&#x2F;panicking.rs:579
&lt;&#x2F;span&gt;&lt;span&gt;   1: &amp;lt;snip&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Under the hood, &lt;code&gt;todo!&lt;&#x2F;code&gt; is the same as &lt;code&gt;panic!&lt;&#x2F;code&gt;, to which it defers its implementation, but with a clear change of semantics: this bit is not yet implemented, but we&#x27;ll do so soon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;every-rose-has-its-thorn&quot;&gt;Every rose has its thorn&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s expand our design and add a few more useful methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns an iterator over the components which are installed by default.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components installed by default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns an iterator over the components which are optional,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; and not installed by default.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components not installed by default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above code we defined two methods on &lt;code&gt;Release&lt;&#x2F;code&gt;, which both return an iterator of &lt;code&gt;&amp;amp;rust_toolchain::Component&lt;&#x2F;code&gt; items.
What happens if we try to compile the code above?:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust_errors&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust_errors &quot;&gt;&lt;code class=&quot;language-rust_errors&quot; data-lang=&quot;rust_errors&quot;&gt;&lt;span&gt;error[E0277]: `()` is not an iterator
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; crates&#x2F;rust-releases-core&#x2F;src&#x2F;lib.rs:80:33
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;80 |     pub fn components(&amp;amp;self) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = help: the trait `Iterator` is not implemented for `()`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;😢&lt;&#x2F;p&gt;
&lt;p&gt;It &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;36375#issuecomment-357216289&quot;&gt;turns out&lt;&#x2F;a&gt;, there is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;36375&quot;&gt;issue&lt;&#x2F;a&gt; where the compiler is unable to figure out what type to use for types which have the never type as their return type and use &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in return position. The  &lt;code&gt;todo!&lt;&#x2F;code&gt; macro falls in this category.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways to work around the problem though.&lt;&#x2F;p&gt;
&lt;p&gt;One option is to use dynamic dispatch and box:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;this&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Box&amp;lt;dyn Iterator&amp;lt;Item = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;this &lt;&#x2F;span&gt;&lt;span&gt;rust_toolchain::Component&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;this&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components not installed by default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another is to return a simple concrete type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;&amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components not installed by default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }   
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A third is to use the explicit type in the return type, but this requires you to think ahead on which iterator type you will be using, which you probably don&#x27;t want to worry about (especially if you will be using &lt;code&gt;impl Iterator&lt;&#x2F;code&gt; on implementation). A fourth would be to implement &lt;code&gt;Iterator&lt;&#x2F;code&gt; for a concrete type, but this also adds a lot of boilerplate.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;12x1lfd&#x2F;blog_post_using_the_todo_macro_to_prototype_your&#x2F;jhjecab&#x2F;&quot;&gt;fifth&lt;&#x2F;a&gt; was suggested by &lt;em&gt;natalialt&lt;&#x2F;em&gt;. I like this one very much, because it is short and to the point (altough also not universably applicable to any &lt;code&gt;impl Trait&lt;&#x2F;code&gt; return type). This solution returns an iterator via the &lt;code&gt;std::iter::once()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::iter;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        iter::once(todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components not installed by default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason that this works, is because &lt;code&gt;std::iter::once&lt;&#x2F;code&gt; returns a valid iterator, namely &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;struct.Once.html&quot;&gt;Once&lt;&#x2F;a&gt;, which makes the return type satisfiable. Where the never type &lt;code&gt;!&lt;&#x2F;code&gt; didn&#x27;t implement &lt;code&gt;Iterator&lt;&#x2F;code&gt;, &lt;code&gt;Once&lt;&#x2F;code&gt; does.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taking-it-to-the-next-level&quot;&gt;Taking it to the next level&lt;&#x2F;h2&gt;
&lt;p&gt;So far, we saw that &lt;code&gt;todo!&lt;&#x2F;code&gt; can be a powerful prototyping tool. If we want to take it to the next level,
we should start making use of Rust&#x27;s type checking capabilities for the composition and usage of our API.
This helps us be much more confident throughout designing of the library.&lt;&#x2F;p&gt;
&lt;p&gt;As shown before, the compiler knows that we do not need to satisfy our return types (within the method body).
However, the return type of these methods will still be checked wherever we use these methods.
This allows us to not only define the new API, while leaving the implementation for later but also write some code on how to use it.
This can be particularly useful to explore whether an API is easy to use as a caller.&lt;&#x2F;p&gt;
&lt;p&gt;I like to do this by writing unit tests for my API. If your API is painful to use, you&#x27;re much more likely to find this out if you had to write
a usage example yourself. Plus, this way you also already have a first test in place. Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_component_returns_none_if_release_has_no_components&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; channel = rust_toolchain::Channel::Nightly;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; release_date = rust_toolchain::ReleaseDate::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; platform = rust_toolchain::Platform::host();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; version = None;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; toolchain = rust_toolchain::Toolchain::new(channel, release_date, platform, version);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; release = Release::new(toolchain, vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; component = release.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_component&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(component.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we were not yet sure how to construct an input for our function under test, we can also use the &lt;code&gt;todo!&lt;&#x2F;code&gt; macro here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_component_returns_none_if_release_has_no_components&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We can use todo!() here too!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We may not be sure yet how to construct our input.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Let&amp;#39;s take the design of the API, one step at a time.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; toolchain = todo!();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The code below will be unreachable though!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; release = Release::new(toolchain, vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; component = release.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_component&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(component.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively, instead of writing inline unit tests, you could also use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;write-documentation&#x2F;documentation-tests.html&quot;&gt;doctests&lt;&#x2F;a&gt; for this purpose:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Release {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Find a component by its name.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; If the component does not exist for this `Release`,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; returns `Option::None`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # Example
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; ```rust
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; use rust_releases_core::Release;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let channel = rust_toolchain::Channel::Nightly;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let release_date = rust_toolchain::ReleaseDate::new(2023, 1, 1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let platform = rust_toolchain::Platform::host();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let version = None;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let toolchain = rust_toolchain::Toolchain::new(channel, release_date, platform, version);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let release = Release::new(toolchain, vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let component = release.find_component(&amp;quot;hello&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; assert!(component.is_none());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_component&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&amp;amp;rust_toolchain::Component&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;find component with name: &amp;#39;{name}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;implementation-time&quot;&gt;Implementation time!&lt;&#x2F;h2&gt;
&lt;p&gt;Once we are satisfied with the basic structure of our API, we can gradually replace each &lt;code&gt;todo!&lt;&#x2F;code&gt; macro with an actual implementation. We do not have to replace all the macros simultaneously, so we can focus on one implementation step at a time. Developing a well-designed API requires careful planning and attention to detail. Taking the time to establish a solid foundation will pay off in the long run, as it will result in  more user-friendly and reliably designed API.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;sup&gt;&lt;span id=&quot;footnote1&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;sup&gt; I&#x27;m currently working on the next version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;rust-releases&quot;&gt;rust-releases&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thanks&quot;&gt;Thanks!&lt;&#x2F;h1&gt;
&lt;p&gt;Special thanks to Chris Langhout, Jean de Leeuw and Martijn Steenbergen for proofreading my blog post; any mistakes are solely mine.&lt;&#x2F;p&gt;
&lt;p&gt;Also many thanks to &lt;em&gt;proudHaskeller&lt;&#x2F;em&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;12x1lfd&#x2F;blog_post_using_the_todo_macro_to_prototype_your&#x2F;jhhn8na&#x2F;&quot;&gt;Reddit&lt;&#x2F;a&gt; for reporting an issue I missed: the type signature I initially used to deal with the &lt;code&gt;todo!&lt;&#x2F;code&gt; and &lt;code&gt;impl Trait&lt;&#x2F;code&gt; would never type check with a concrete implementation (this has been addressed), and to &lt;em&gt;natalialt&lt;&#x2F;em&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;12x1lfd&#x2F;blog_post_using_the_todo_macro_to_prototype_your&#x2F;jhjecab&#x2F;&quot;&gt;Reddit&lt;&#x2F;a&gt; for suggesting a useful workaround to the same issue when the return type is &lt;code&gt;impl Iterator&lt;&#x2F;code&gt;, by using &lt;code&gt;iter::once(todo!())&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;discuss&quot;&gt;Discuss&lt;&#x2F;h1&gt;
&lt;p&gt;Discussions and feedback are most welcome! Discuss on &lt;a href=&quot;https:&#x2F;&#x2F;reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;12x1lfd&#x2F;blog_post_using_the_todo_macro_to_prototype_your&#x2F;&quot;&gt;Reddit&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=35683396&quot;&gt;HackerNews&lt;&#x2F;a&gt; or create an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foresterre&#x2F;foresterre.github.io&#x2F;issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&quot;&gt;issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
